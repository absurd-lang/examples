// numbers

    // addition
    print(2 + 1);
    // substraction
    print(4 - 1);
    // multiplication
    print(2 * 2);
    // division
    print(6 / 2);
    // increment
    print(++2);
    // decrement
    print(--4);
    // binary
    print(0b11);
    // octal
    print(0o3);
    // hexadecimal
    print(0x3);
    // separated
    print(5_000);

// strings

    // normal
    print("hi");
    // template
    print("2 + 2 = {2 + 2}");

// char

    // char
    print('f');

// booleans

    // true
    print(true);
    // false
    print(false);
    // not
    print(!true);
    // not not
    print(!!true);
    // greater
    print(2 > 1);
    // greater or equal to
    print(2 >= 1);
    // less
    print(3 < 4);
    // less or equal to
    print(3 <= 4);
    // equal
    print(4 == 4);
    // not equal
    print(2 != 3);

// null
    print(null);

// vector

    // empty
    print([]);
    // vector
    let vec: Vec<number> = [1, 2, 3];
    print(vec);
    // calling
    print(vec[1]);
    // destructuring
    let [a, b]: Vec<number> = [1, 2];
    print(a);

// tuple

    // tuple
    let tup: Tuple<(number, number)> = (1, 2);
    print(tup);
    let (a, b): Tuple<(number, number)> = (1, 2);
    print(a);

// record

    // empty
    print({});
    // record
    let rec: Record<{name: string, age: number}> = {name: "Johny", age: 25};
    print(rec);
    let {name, age}: Record<{name: string, age: number}> = {name: "Johny", age: 25};
    print(name);
